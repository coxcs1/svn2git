---
- block:
  - name: copy repo list
    template:
      src: "repo_list.txt"
      dest: "{{ remote_working_dir }}/repo_list.txt"
      mode: 0644

  - name: read repo list
    command: cat {{ remote_working_dir }}/repo_list.txt
    register: repo_list

  - name: copy params template
    template:
      src: "set_params.j2"
      dest: "{{ remote_working_dir }}/set_params"
      mode: 0644

  - name: read parameters
    command: cat {{ remote_working_dir }}/set_params
    register: params

  - name: clear repo tmp files
    file:
      path: "{{ remote_working_dir }}/repo_list_tmp.txt"
      state: absent

  - name: create repo list temp file
    template:
      src: "repo_list.txt"
      dest: "{{ remote_working_dir }}/repo_list_tmp.txt"
      mode: 0644

  - name: clear each repo list file
    file:
      path: "{{ remote_working_dir }}/{{ inventory_hostname }}_repo_list.txt"
      state: absent

  - name: create each repo list file
    file:
      path: "{{ remote_working_dir }}/{{ inventory_hostname }}_repo_list.txt"
      state: touch
      mode: 0644

  - name: copy top amount of repos and add to list
    shell: >
      cat {{ remote_working_dir }}/repo_list_tmp.txt | 
      head -{{ params.stdout_lines[groups.all.index(item)] }} 
      > {{ remote_working_dir }}/{{ item }}_repo_list.txt && 
      sed -i '1,{{ params.stdout_lines[groups.all.index(item)] }}d' 
      {{ remote_working_dir }}/repo_list_tmp.txt
    with_items:
      - "{{ groups.all }}"
    args:
      executable: /bin/bash

  when: "inventory_hostname == groups.all[0]"

- name: read contents of remote file
  slurp:
    src: "{{ remote_working_dir }}/{{ inventory_hostname }}_repo_list.txt"
  delegate_to: "{{ groups.all[0] }}"
  register: "result"

- name: store content in repo list files
  copy:
    dest: "{{ install_dir }}/repo_list"
    content: "{{ result.content | b64decode }}"
    mode: 0644

- name: clean up working directory
  file:
    path: "{{ remote_working_dir }}"
    state: absent
  when: "inventory_hostname == groups.all[0]"